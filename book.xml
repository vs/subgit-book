<?xml version="1.0"?>
<book xmlns:xi="http://www.w3.org/2001/XInclude" xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0">
    <bookinfo>
        <title>SubGit Remote Book</title>
        <subtitle>Git Mirror of a Remote Subversion Repository</subtitle>
        <releaseinfo/>
        <copyright>
            <year>2013</year>
            <holder>TMate Software</holder>
        </copyright>
        <legalnotice>
            <para>This work is licensed under a <link xl:href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</link>.
            </para>
        </legalnotice>
    </bookinfo>   

    
    <chapter id="introduction">
        <title>Overview</title>
        <para>SubGit is a tool for bidirectional Subversion and Git repositories synchronization. SubGit is written in Java. 
        </para>
        <para>For information on how to install SubGit into the <emphasis role="bold">local</emphasis> Subversion repository, refer to 
        <emphasis role="bold"><ulink url="https://subgit.com/book/index.html">SubGit Local Book</ulink></emphasis>. This book
        only covers the case when SubGit is used to create Git mirror of a remote Subversion repository.</para>
        
        <para>Most commonly, SubGit user starts with Subversion repository being configured on the server. 
              Access to Subversion repository is available over network (with HTTP(s), plain svn or svn over SSH protocols) and over the local file system. 
              Correspondingly, users requests are handled by Apache Web Server, svnserve daemon or sshd daemon which invokes svnserve process. 
              <xref xrefstyle="select: label" linkend="start"/> shows a generic outline of the described configuration.
       </para>               
       <para>           
           <figure id="start"><title>Common Subversion Setup</title>
           <mediaobject><imageobject><imagedata scale="105" fileref="images/start.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <para>
        User creates Git repositories with SubGit and configures them so, that these repositories are kept in sync with the remote Subversion
        repository. Each Git repository mirrors one Subverion project (there could be multiple projects within a single Subversion repository).
        Changes pushed to the Git repository are instantly translated into Subversion project and vice versa - commits to Subversion project
        are reflected in the corresponding Git repository.</para>
        <para>Optionally, user may enable revision properties on Subversion side by enabling 
        pre-revprop-change hook in Subversion repository - this will let SubGit use single Subversion user account, but this modification is not 
        required, so even Subversion repositories that you do not have shell access to could be mirrored with SubGit. 
        <xref xrefstyle="select: label" linkend="subgit"/> shows typical SubGit set up that allows one to use both Subversion and Git 
        and smoothes migration path. 
        </para> 
        <para>During mirror initialization stage, SubGit translates existing Subversion revisions into a newly created Git repository. There
        is also a way to skip mirroring and only use SubGit for one-time import from Subversion to Git.</para>
        <para>
           <figure id="subgit"><title>Git Mirror of a Remote Subversion Repository created with SubGit</title>
           <mediaobject><imageobject><imagedata scale="85" fileref="images/remote-subgit.png"/></imageobject></mediaobject>
           </figure>
        </para>
        <formalpara><title>Chapter summary:</title>
        <para>
        <itemizedlist>
            <listitem>SubGit creates Git repository that mirrors project in a remote Subversion repositories</listitem>
            <listitem>SubGit could be used for one-time import from Subversion to Git</listitem>
            <listitem>Direct shell access to Subversion repository is not required</listitem>
            <listitem>SubGit grants users with a choice of whether to use Git or Subversion and smoothes migration path</listitem>
            <listitem>SubGit is implemented in Java and needs Java 1.5 or newer</listitem>
        </itemizedlist>
        </para>
        </formalpara>
    </chapter>

    <chapter id="features">
        <title>SubGit Features</title>        
        
        <para>Major SubGit benefits are
        <itemizedlist>
            <listitem>Great translation and initial import performance (in comparison to git-svn)</listitem>
            <listitem>No limits are put on Svn and Git users (contrary to git-svn)</listitem>
            <listitem>Requires no shell access to Subversion repository (contrary to SubGit 1.0.x)</listitem>
        </itemizedlist>
        SubGit includes powerful translation engine, which would translate
        <itemizedlist>
            <listitem>merge tracking information and merge history</listitem>
            <listitem>non-linear Git commits history to Subversion</listitem>
            <listitem>subprojects, tags and branches</listitem>
            <listitem>svn:ignore and .gitignore ignore definitions</listitem>
            <listitem>svn:eol-style and .gitattributes special properties</listitem>
            <listitem>symbolic links</listitem>
            <listitem>commit authors and dates</listitem>
            <listitem>files and directories renames</listitem>
        </itemizedlist>
        There are a few limitations on translation (see <xref linkend="limitations"/>). These 
        limitations only affects translation, and do not prevent Git and Subversion from being
        used to their full extents.
        </para>
    </chapter>

    <chapter id="translation">
        <title>Mirror Configuration Overview</title>
        <para>To synchronize Subversion and Git repositories, SubGit maps entities of one system to those of another.
        One Git repository is always mapped to a single project within Subversion repository. There could be from one
        to many projects in Subversion repository.
        Git repository contains SubGit configuration that defines the following information and mappings: 
        <itemizedlist>
        <listitem>Subversion project location within Subversion repository</listitem>
        <listitem>Subversion project branches and tags are mapped to the Git branch and tag references</listitem>
        <listitem>Subversion users are mapped to the Git committers</listitem>
        </itemizedlist>
        Above mappings are static and configured within Git repository once before translation and synchronization is started. 
        All mappings and other information is stored in configuration files located in the <code>GIT_REPOS/subgit</code> directory. 
        Following sections describe these mappings in more details.
        </para>

        <note><title>Note:</title>
        <para>
        Subversion is a very powerful system and sets mostly no limits on the repository and project layout. 
        Hence, it may not be always possible to define necessary mappings 
        for any project stored in Subversion repository found out there in the wild. Such unmappable projects would not be handled by SubGit. 
        However, for the most of the Subversion repositories in production use, mappings could be defined and, in most cases,
        they are detected automatically by SubGit. 
        </para>
        </note>

        <sect1 id="projects-mapping"><title>Subversion Projects Location</title>
        <para>  
        Subversion repository may contain one or more projects. Project is a location (folder) in Subversion repository which follows Subversion recommended repository
        layout, i.e. project folder has <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> subfolders:
        <literallayout><code>/project
   /trunk    # project's "main line"
   /branches # contains project feature and version branches, copied from trunk or other branches
   /tags     # contains project tags (trunk and branches snapshots)</code></literallayout>
        It is not necessary for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders to have these exact names, but the roles 
        of these folders are important. Each project could be mapped to a bare Git repository as shown
        in <xref xrefstyle="select: label" linkend="single"/> and <xref xrefstyle="select: label" linkend="multi"/> along with the corresponding 
        parts of SubGit configuration file.  
        <figure id="single"><title>Single Project Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/remote-single.png"/></imageobject></mediaobject>
        </figure>
        <figure id="single-config"><title>SubGit configuration file (single project mapping)</title>
        <literallayout><code>        [svn]
        # URL that points to a project root 
        # (may be the same as Subversion repository root)
        url = http://host/svn/repos
</code></literallayout>
        </figure>
        <figure id="multi"><title>Multiple Projects Repository Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/remote-multi.png"/></imageobject></mediaobject>
        </figure>
        <figure id="multi-config"><title>SubGit configuration file (two projects mapping)</title>
        <literallayout><code><emphasis>/var/git/project1.git/subgit/config</emphasis>        
                
        [svn]
        # project location within Subversion repository
        url = http://host/svn/repos/project1
        ...
        
<emphasis>/var/git/project2.git/subgit/config</emphasis>
        
        [svn]
        # project location within Subversion repository
        url = http://host/svn/repos/project2
        </code></literallayout>
        </figure>
        </para></sect1>

        <sect1 id="branches-mapping"><title>Branches and Tags mapping</title>
        <para>
        For each project mapped to a Git repository, branches and tags are mapped to the corresponding references in the Git repository.
        SubGit distinguishes the following folders in Subversion project as branches or tags:
        <itemizedlist>
        <listitem>trunk folder</listitem>
        <listitem>folders in the dedicated branches folder</listitem>
        <listitem>folders in the dedicated shelves folder</listitem>
        <listitem>folders in the dedicated tags folder</listitem>
        </itemizedlist>
        </para>
        <para>Shelves are special kind of branches used by SubGit to represent Git anonymous branches in Subversion repository.</para>
        <para>
        Each folder is mapped to the reference (branch or tag) in the Git repository. For trunk folder the mapping is one-to-one as there 
        could be only one trunk folder (as well as only one master reference in Git) and for other folders wildcard mapping is used. Default mapping and 
        corresponding SubGit configuration file part is shown in <xref xrefstyle="select: label" linkend="mapping"/>  and <xref xrefstyle="select: label" linkend="mapping-config"/>.
        </para>
        <para>Whenever project uses standard folder names (i.e. trunk, branches and tags), SubGit would automatically detect and configure mapping for that project. Otherwise
        configuration would have to be manually adjusted to include proper paths and references names.</para>
        <para>  
        <figure id="mapping"><title>Default Branches and Tags Mapping</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/mapping.png"/></imageobject></mediaobject>
        </figure>
        <figure id="mapping-config"><title>SubGit configuration file (default branches and tags mapping)</title>
        <literallayout><code>        [svn]
        url = http://host/svn/repos/project1
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = trunk:refs/heads/master
        branches = branches/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = tags/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para>  
        Notice that project2 in <xref xrefstyle="select: label" linkend="multi"/> features
        non-standard names for <emphasis>trunk</emphasis>, <emphasis>branches</emphasis> and <emphasis>tags</emphasis> folders. <xref xrefstyle="select: label" linkend="mapping-names"/> shows
        mapping configuration for that project.
        <figure id="mapping-names"><title>SubGit configuration file (non-standard folders names)</title>
        <literallayout><code>        [svn]
        url = http://host/svn/repos/project2
        
        # branches and tags mapping in form of
        # branchKind=Subversion-Path-Pattern:Git-Reference-Pattern
        
        trunk = main:refs/heads/master
        branches = versions/*:refs/heads/*
        shelves = shelves/*:refs/shelves/*
        tags = stamps/*:refs/tags/*</code></literallayout>
        </figure>
        </para>
        <para><xref xrefstyle="select: label" linkend="multi-combined"/> outlines combined project and branches mappings for two projects Subversion repository.   
        <figure id="multi-combined"><title>Project and Branches Mapping</title>
        <mediaobject><imageobject><imagedata scale="105" fileref="images/remote-multi-combined.png"/></imageobject></mediaobject>
        </figure>
        </para>
        </sect1>
        
        <sect1 id="authors-mapping"><title>Authors Mapping</title>
        <para>By default there is no explicit authors mapping and the following rules are used for translation:
        <itemizedlist>
        <listitem>Subversion "<code>svn_user_name</code>" is translated to "<code>svn_user_name &lt;&gt;</code>" in Git</listitem>
        <listitem>Git "<code>Author Name &lt;email@domain.com&gt;</code>" is translated to "<code>Author Name</code>" in Subversion</listitem>
        </itemizedlist>
        </para>
        
        <para>
        Additionally to the default rule, explicit authors mapping may be provided by SubGit configuration. Authors mapping is stored in a separate 
        text file which is looked at <code>GIT_REPOS/subgit/authors.txt</code> by default. Mapping file is read in system default encoding.   
        <figure id="authors.txt"><title>GIT_REPOS/subgit/authors.txt file</title>
        <literallayout><code>svn_user_name = Git Name &lt;name@email.com&gt;</code></literallayout></figure>
        Default authors.txt location may be changed in SubGit configuration file. 
        <figure id="authors.txt"><title>SubGit configuration file defines authors.txt location</title>
        <literallayout><code>        [core]
        ...
        # location of the authors mapping file        
        authorsFile = subgit/authors.txt
        ...</code></literallayout></figure>
        Authors mapping file (authors.txt) contents may be altered at any time and new mapping becomes effective immediately. 
        </para>        
        </sect1>
    </chapter>

    <chapter id="import">
        <title>One-time Import from Subversion to Git</title>
        <para>Sometimes there is no need to keep Git repository in sync with Subversion repository
        and one way import is sufficient. SubGit offers shortcut <code>import</code> command that allows
        to import a project into a Git repository with a one-liner. <code>import</code> command
        lets user to specify all necessary options on a command line, thus making <code>import</code> command
        a usable in a batch automation.</para>
        <literallayout><code>$ subgit help import
        
info: Import SVN or Git repository.
usage: subgit import [--svn-url URL] [--default-domain DOMAIN] [--minimal-revision REV] [--authors-file FILE] [--trunk PATH] [--branches PATH] [--tags PATH] [--username SVN_USERNAME] [--password SVN_PASSWORD] [--non-interactive] [--trust-server-cert] [--private-key SVN_PRIVATE_KEY_PATH] [--private-key-passphrase SVN_PRIVATE_KEY_PASSPHRASE] REPOS_PATH

  Import existing Subversion project at URL into Git repository at REPOS_PATH.
  When Git repository at REPOS_PATH does not exist it will be created.
  
  Upon import completion optionally one may get rid of SubGit-specific files
  by running 'subgit uninstall --purge REPOS_PATH' or start continuous synchronization
  by running 'subgit install REPOS_PATH'.

Valid options:

--svn-url URL           : specify URL of remote Subversion repository
--default-domain DOMAIN : domain to be used to generate Git committer name by SVN committer name
                          if there's no corresponding rule in authors file
--minimal-revision REV  : specify Subversion revision REV to start translation from;
                          revisions less than REV would not be translated
--authors-file FILE     : authors mapping file used to map Subversion committers names 
                          to Git committers names
-T [--trunk] PATH       : path to a directory that plays the role of SVN trunk,
                          relative to project root specified by --svn-url
-b [--branches] PATH    : path to a directory that plays the role of SVN branches directory,
                          relative to project root specified by --svn-url
-t [--tags] PATH        : path to a directory that plays the role of SVN tags directory,
                          relative to project root specified by --svn-url
--username SVN_USERNAME : username to use to access Subversion repository;
                          if no username is specified, SubGit may prompt for it later
--password SVN_PASSWORD : password to use to access Subversion repository;
                          if no password is specified, SubGit may prompt for it later
--non-interactive       : do no interactive prompting
--trust-server-cert     : accept unknown SSL server certificates without
                          prompting (but only with '--non-interactive')
--private-key           : path to private key file to use to access Subversion repository;
                          if no path is specified, SubGit may prompt for it later
--private-key-passphrase: passphrase for private key file to use to access Subversion repository;
                          if no passphrase is specified, SubGit may ask for it later</code></literallayout>
                            
    <para>In most cases, defaults along with pre-existing Subversion authentication storage would be sufficient and
    only Subversion project URL have to be specified as an <code>import</code> command argument:
    <literallayout><code>$ subgit import --non-interactive --svn-url http://svn.svnkit.com/repos/sqljet sqljet.git 
 SubGit version 2.0.0-EAP ('Patrick') build #2552
 This is an EAP build, which you may not like to use in production environment.

 Translating Subversion revisions to Git commits...

   Subversion revisions translated: 1292.
   Total time: 579 seconds.

 IMPORT SUCCESSFUL
</code></literallayout> 
    You may interrupt import operation with Ctrl-C and resume it later. Also, it is possible to enable
    synchronization by running <code>subgit install GIT_REPOS</code> upon import completion.
    </para>
    </chapter>

    <chapter id="installation">
        <title>Creating Git Mirror of a Subversion Repository</title>
        
        <sect1 id="installation-stages"><title>Installation Stages</title>
        <para>To translate Subversion repository to Git and to enable bi-directional synchronization, 
        one have to use SubGit to create and configure Git repository. Mirror creation consists of 
        three stages: <emphasis role="bold">repository creation</emphasis>, 
        <emphasis role="bold">configuration adjustment</emphasis> and <emphasis role="bold">installation</emphasis>.
        </para>

        <figure id="remote-install-stages"><title>Mirror Creation Stages</title>
        <mediaobject><imageobject><imagedata scale="80" fileref="images/remote-install-stages.png"/></imageobject></mediaobject>
        </figure>

        <para>At configuration stage SubGit creates Git repositories ans stored default mirror configuration into it. Then user has a chance to adjust generated
        configuration. At the installation stage SubGit performs actual translation of existing Subversion revisions into Git commits and then turns synchronization on.
        <xref xrefstyle="select: label" linkend="remote-install-stages"/> schematically shows SubGit installation stages. 
        </para>
        </sect1>

        <sect1><title>Run <code>subgit configure</code></title>
        <para>Run SubGit <code>configure</code> command to make SubGit create empty bare Git repository and link it with a project in Subversion
        </para> 
        <para>When running <code>configure</code> command user have to specify Subversion project URL and, optionally, minimal revision
        to start synchronization from:</para>
<literallayout><code>$ <emphasis role="bold">subgit configure --svn-url http://svn.svnkit.com/repos/sqljet sqljet.git</emphasis>
SubGit version 2.0.0 ('Patrick') build #2552

Configuring writable Git mirror of remote Subversion repository:
    Subversion repository URL : http://svn.svnkit.com/repos/sqljet
    Git repository location   : sqljet.git

CONFIGURATION SUCCESSFUL
</code></literallayout>
        <para>At configuration stage SubGit does not establish connect with Subversion repository, but generates configuration file with the information 
        necessary to proceed with installation. Files added to the Git repository by the <code>configure</code> command are shown below:</para>
<literallayout><code>git_repository/
  branches
  hooks
  logs
  objects
  refs
  <emphasis role="bold">subgit/</emphasis>
      lib/          # SubGit binaries
      logs/         # SubGit logs
      authors.txt   # default authors mapping (empty)
      config        # SubGit configuration file
      passwd        # Password credentials to access Subversion repository
      format        # Information on SubGit version
  config            # Git configuration file
  HEAD</code></literallayout>
        </sect1>

        <sect1><title>Adjust configuration: overview</title>
        <para>SubGit <code>configure</code> command creates bare empty Git repository and writes default configuration and mappings to the <code>GIT_REPOS/subgit/config</code> file. 
        Generated default configuration have to be adjusted before proceeding with install stage, in particular user have to provide credentials (or specify where to find them)
        to let SubGit access Subversion repository.
        <code>config</code> file generated by default will look like this (some of the less frequently used options are not shown here):   
        </para>
        <literallayout><code>[core]
    authorsFile = subgit/authors.txt
    pathEncoding = UTF-8
    defaultDomain = tmatesoft.com

[svn]
    url = http://svn.svnkit.com/repos/sqljet

    trunk = trunk:refs/heads/master
    branches = branches/*:refs/heads/*
    tags = tags/*:refs/tags/*
    shelves = shelves/*:refs/shelves/*

    fetchInterval = 60
    connectTimeout = 30
    readTimeout = 60

    auth = default

[auth "default"]
    passwords = subgit/passwd
    useDefaultSubversionConfigurationDirectory = false
    subversionConfigurationDirectory = /home/user/subversion</code></literallayout>
        <note><title>Paths in <code>subgit/config</code> file:</title><para>File system paths in <code>subgit/config</code> file could be specified in relative or absolute form. Relative paths are those
        that do not start with '/' or drive letter on Windows OS. Relative paths are treated as relative to the Git repository root directory.</para></note>
        </sect1>
        <sect1><title>Adjust configuration: provide authors mapping</title>
        <para>Write Subversion users to Git authors mapping to <code>conf/authors.txt</code> file (see <xref linkend="authors-mapping"/>). For instance:
        <literallayout><code><emphasis role="bold">conf/authors.txt</emphasis>: 
semen = Semen Vadishev &lt;vadishev@tmatesoft.com&gt;
dmitry = Dmitry Pavlenko &lt;pavlenko@tmatesoft.com&gt;</code></literallayout></para>

        <formalpara><title>Or specify existing authors mapping file:</title>
        <para>
        <literallayout><code>[core]
    ...
    authorsFile = <emphasis role="bold">/var/git/company-authors-mapping.txt</emphasis></code></literallayout>
        Specify path to the authors mapping file (see <xref xrefstyle="select: label" linkend="authors-mapping"/>) as <code>core.authorsFile</code> option value. 
        Path is either relative to the Subversion repository root (e.g. conf/authors.txt expands to SVN_REPOS/conf/authors.txt) or absolute.</para>
        </formalpara>

        <formalpara><title>Provide default domain for missing emails:</title>
        <para>
        <literallayout><code>[core]
    ...
    defaultDomain = <emphasis role="bold">company.com</emphasis></code></literallayout>
        Email has to be part of the Git author information and some of Git operations may fail when email is not present.
        SubGit will use <code>core.defaultDomain</code> value to generate author's email when author is not found in the authors mapping
        or in case authors mapping doesn't provide email.</para>
        </formalpara>
        <formalpara>
          Tip: Add author mappings for as many of you team members as possible, even if they don't use Git
          as the log history will be more consistant.
        </formalpara>
        </sect1>
       <sect1><title>Adjust configuration: path encoding</title>
        <para>
        <literallayout><code>[core]
    ...
    pathEncoding = <emphasis role="bold">UTF-8</emphasis></code></literallayout>
        Git stores paths as a sequence of bytes, without encoding specified. Usually paths ends up in Git as-is, i.e. in the local file system encoding.
        Use <code>git.pathEncoding</code> option to specify encoding to use when translating string path found in Subversion repository to Git. 
        Most modern file systems use or could be configured to use UTF-8 encoding and this is default and recommended value.</para>
        </sect1>
        <sect1><title>Adjust configuration: branches mapping</title>
        <para>
        <literallayout><code>[svn]
    ... 
    url = <emphasis role="bold">http://host/svn/repos</emphasis>
</code></literallayout>
        <code>svn.url</code> option value specifies project location. It is used as the root URL relative to which mappings paths are treated.</para>
        
        <para>
        <literallayout><code>[svn]
    ... 
    trunk = trunk:refs/heads/master
    branches = branches/*:refs/heads/*
    tags = tags/*:refs/tags/*
    shelves = shelves/*:refs/shelves/*</code></literallayout>
        There are four kinds of branches that have to be mapped, each represented by its own option: <emphasis role="bold">trunk</emphasis>, 
        <emphasis role="bold">branches</emphasis>, <emphasis role="bold">tags</emphasis> and <emphasis role="bold">shelves</emphasis>. Each option establishes  
        SVN_PATH to GIT_REFERENCE correspondense for a particular kind of entity. 
        Mapping syntax for <emphasis role="bold">trunk</emphasis> is:
        <literallayout><code>
trunk = SVN_PATH:GIT_REFERENCE</code></literallayout>
        <code>svn.trunk</code> option allows to specify single <code>SVN_PATH:GIT_REFERENCE</code> mapping as its value. <code>SVN_PATH</code>
        is a path relative to the project <code>svn.url</code> location and <code>GIT_REFERENCE</code> is a git reference e.g. <code>refs/heads/master</code>.
        Mapping meaning is that changes made on or below <code>SVN_PATH</code> in Subversion project translated to the Git commits on <code>GIT_REFERENCE</code> and conversly,
        commits on <code>GIT_REFERENCE</code> would be translated to the changes below <code>SVN_PATH</code>.   
        Mapping syntax for <emphasis role="bold">branches, tags</emphasis> and <emphasis role="bold">shelves</emphasis> is:
        <literallayout><code>
branches = SVN_PATH[/*]:GIT_REFERENCE[/*][;MAPPING]</code></literallayout>
        These option allows to specify multiple mappings and each mapping may define many-to-many relationship. Mapping could be either one-to-one or
        many-to-many, in other words when '*' wildcard is used it should be present in the both sides of mapping. Each of the options must contain
        at least one many-to-many mapping (one with '*' wildcard). For example:
        <literallayout><code>
branches = branches/*:refs/heads/*;release_branhces/b1:refs/release/b1</code></literallayout>
        Above mapping maps all branches in Subversion <code>branches</code> directory to the Git <code>refs/heads</code> namespace and,
        additionally, maps single <code>release_branches/b1</code> branch to <code>refs/releases/b1</code> Git branch reference.
        </para>
        <para>
        Be careful when specifying mapping, it would not be possible to adjust it when synchronization is enabled. Only branches and tags
        that are included in the mapping will be imported and kept in sync by SubGit.
        </para>
        </sect1>
        <sect1><title>Adjust configuration: credentials</title>
        <para>In order to create new revision in Subversion repository, SubGit needs credentials to authorize itself with Subversion server. 
        SubGit user may provide multiple sets of credentials (username/password pairs) so that SubGit could choose with username to 
        authorize with when creating new revision. There are a few sources SubGit looks for credentials:
        </para>
        <formalpara><title>GIT_REPOS/subgit/passwd file:</title>
        <para>SubGit looks into <code>GIT_REPOS/subgit/passwd</code> file to read username/password pairs. Passwords are expected to 
        be plaintext. It is a good idea to limit file read access for this file to the user account that runs SubGit.</para>
<literallayout><code>    username password
    username1 secret
    ...
    usernameN anothersecret
</code></literallayout>
<para>Path to the <code>GIT_REPOS/subgit/passwd</code> file could be changed in SubGit confgiruation file:</para>
        <literallayout><code>[auth "default"]
    ... 
    passwords = subgit/passwd</code></literallayout>
        </formalpara>
    <formalpara><title>SubGit configuration file:</title>
    <para>SSH and SSL client credentials could be defined explicitly in <code>subgit/config</code> configuration file:</para>
        <literallayout><code>[auth "default"]
    ... 
    sshKeyFile = /home/user/ssh-private-key.openssh
    sshKeyFilePassphrase = secret

    sslClientCertFile = /home/user/ssl-client-cert.p12
    sslClientCertPassphrase = secret</code></literallayout>
    </formalpara>
        <formalpara><title>Local Subversion credentials cache:</title>
        <para>To make SubGit look for credentials in the local Subversion credentials cache, set <code>auth.useDefaultSubversionConfigurationDirectory</code> option
        to <code>true</code> and ensure that Subversion credentials cache path is correct:</para>
        <literallayout><code>[auth "default"]
    ... 
    useDefaultSubversionConfigurationDirectory = true
    subversionConfigurationDirectory = /home/user/.subversion</code></literallayout>
    <note><title>HTTP Proxy Configuration</title><para>In case Subversion repository access requires proxy to be configured, then <code>auth.useDefaultSubversionConfigurationDirectory</code>
    must be set to <code>true</code> and proxy settings should be defined in Subversion <code>servers</code> file.</para></note>
        </formalpara>
        </sect1>
        <sect1><title>Credentials and Subversion pre-revprop-change hook</title>
        <para>To create new Subversion revision, SubGit has to authroize with Subversion server. In order to do this,
        SubGit follows the following algorithm:
        <itemizedlist>
        <listitem>Git commit author is matched to Subversion author name (<code>AUTHOR</code>)</listitem>
        <listitem>All configured credentials sources are iterated to find
        <code>AUTHOR</code>'s credentials</listitem>
        <listitem>In case matching credentials found, SubGit uses them for authorization</listitem>
        <listitem>In case no matching credentials has been found, SubGit uses any of the available</listitem>
        <listitem>As soon as new revision is committed, SubGit sets its <code>svn:author</code> revision property to <code>AUTHOR</code></listitem>
        </itemizedlist>
        The most secure way to configure SubGit credentials is to provide single set of credentials (either explicitly in <code>subgit/passwd</code> file or
        implicitly by specifying local Subversion configuration path). However, use of Subversion revision properties feature requires <code>pre-revprop-change</code> hook
        to be enabled in Subversion repository. Add empty hook script with 0 exit code to enable revision properties:
        <literallayout><code>
SVN_REPOSITORY/
    hooks/
       <emphasis role="bold">pre-revprop-change</emphasis>     # for Linux and OS X
       <emphasis role="bold">pre-revprop-change.bat</emphasis> # for Windows
        </code></literallayout>
        </para> 
        <para>Hook file contents might be as simple as:</para>
        <formalpara><title>Linux and OS X:</title><para>
        <literallayout><code>#!/bin/sh
exit 0;</code></literallayout>
        </para>
        </formalpara>
        <formalpara><title>Windows:</title><para>
        <literallayout><code>@echo off
exit 0</code></literallayout>
        </para>
        </formalpara>
        <para>Installing hooks to Subversion repository requires direct shell access to Subversion repository server. 
        This might not always be available and in that case SubGit might fail to set proper author or date for a
        newly created Subversion revisions.</para>
        </sect1>
        <sect1><title>Adjust configuration: other options</title>
        
        <para>
        <literallayout><code>[svn]
    ...
    minimalRevision = <emphasis role="bold">1024</emphasis></code></literallayout>
        Set <code>svn.minimalRevision</code> to Subversion revision from which translation should be started. Revisions older than specified 
        would not be translated and would not be present in the Git repository. Limiting range of revisions with this option may reduce initial
        translation time.</para>
        <para>One will find more options in the <code>subgit/config</code> file, as well as documentation 
        on what these options control.</para>
        </sect1>
        <sect1><title>Run <code>subgit install</code></title>
        <para>Run SubGit <code>install</code> command to make SubGit perform initial translation from Subversion to Git 
        and to enable synchronization.<code>install</code> command uses configuration previously generated by <code>configure</code> command. Sample Subgit <code>install</code> command output is shown below:
<literallayout><code>$ <emphasis role="bold">subgit install repository.git</emphasis>
SubGit version 2.0.0 ('Patrick') build #2552

Translating Subversion revisions to Git commits...

    Subversion revisions translated: 20.
    Total time: 10 seconds.

INSTALLATION SUCCESSFUL</code></literallayout>
        Initial translation may take a while, during translation time Git repository remains readable, but pushes are disabled for the time of
        initial import. User could interrupt initial translation with Ctrl-C and resume it later by running <code>subgit install GIT_REPOS</code></para>
        <para>SubGit <code>install</code> command enables synchronization by installing hooks into Git repository. Existing Git <code>pre-receive</code> and 
        <code>post-receive</code> hooks ()if there were any) are preserved and executed normally.
<figure id="repository-after-install"><title>Repository after <code>install</code> command is completed</title>         
<literallayout><code>GIT_REPOS/
    branches/
    hooks/
        <emphasis role="bold">pre-receive               </emphasis># SubGit hook, do not edit or remove
        <emphasis role="bold">user-pre-receive.sample   </emphasis># user's pre-receive hook template
        <emphasis role="bold">post-receive              </emphasis># SubGit hook, do not edit or remove
        <emphasis role="bold">user-post-receive.sample  </emphasis># user's post-receive hook template
    logs/
    objects/
    refs/
    svn/
    subgit/
    config
    HEAD</code></literallayout></figure>
  As soon as <code>install</code> command reports successful termination, Git users may start to push to the Git repository - new 
  commits will be translated to the new Subversion repository revisions and vice versa - new Subversion revisions will be 
  translated to the new Git commits.
        </para>
        </sect1>
        <sect1><title>Background translation process</title>
        <para>Upon installation completion, SubGit launches background process that periodically polls Subversion repository. 
        Whenever new revisions are found, they are translated to Git commits. This way Git repository remains up-to-date
        most of the time. This background process is optional and could be killed. When background process is not running, new Subversion
        revisions will be translated to Git commits on Git user <code>push</code> as part of the <code>pre-receive</code> hook processing.
        Unless disabled in configuration file, user's push will restart background translation process.</para>
        <para>Options that affect SubGit background process could be set in <code>GIT_REPOS/subgit/config</code> configuration file:</para>
        <literallayout><code>[svn]
   ...   
   fetchInterval = 60      # check for new revisions every 60 seconds
   ...
[daemon]
   ...
   idleTimeout = infinity  # backgroud process never exits</code></literallayout>
        </sect1>
        <para>Background translation process might be disabled by setting <code>daemon.idleTimeout</code> option value to 0. In this
        case translation process will exit immediately after <code>push</code> is completed: 
        </para>
        <literallayout><code>[daemon]
   ...
   idleTimeout = 0  # backgroud process disabled</code></literallayout>
    <para>To force translation of the outstanding Subversion revisions, user may use <code>subgit fetch</code> command:</para>
        <literallayout><code>$ subgit fetch [--async] GIT_REPOS_PATH</code></literallayout>
    <para>Alternatively invoke a no-op push from a remote working tree: </para>
        <literallayout><code>$ git push origin +:refs/heads/bogus_branch</code></literallayout>
        <para>Above command will attempt to delete non-existing remote branch and as a side effect will force SubGit to 
        synchronize Git and Subversion repositories.</para>
        <para>To stop background process gracefully use <code>shutdown</code> command:</para>
        <literallayout><code>$ subgit shutdown repository.git
SubGit version 2.0.0 ('Patrick') build #7777

About to shut down background translation process.
Shutdown request sent to background translation process (pid 4404).
Background translation process has received shutdown request and will exit NOW.

SHUTDOWN SUCCESSFUL</code></literallayout>
        <sect1><title>Recommended client-side Git configuration</title>
        <para>Git users will clone Git repository on the server side to start working with the project locally.
        There are number of configuration options that is recommended to add to the clone's <code>.git/config</code> configuration file.
        These options are not required, but merely recommended for better user experience.</para>
        <formalpara><title>Fetch SubGit mapping information:</title>
        <para>
        <literallayout><code>[remote "origin"]
    ...
    <emphasis role="bold">fetch = +refs/svn/map:refs/notes/commits</emphasis></code></literallayout>
        <code>refs/notes/commmits</code> reference points to the so called notes that contains Subversion to Git 
        mapping information for each commit.
        Note that this <code>fetch</code> line should be added as a new line and
        not appended to any existing <code>fetch</code> lines.
        With these notes fetched <code>git log</code> command will show
        mapping information alongside with the commit message in the log output:
        <literallayout><code>$ git log
commit bee5c8ae9bd8b2077f1acaedc9982ab4bd84d91b
Author: Alexander Kitaev &lt;kitaev@tmatesoft.com&gt;
Date:   Thu Sep 6 18:58:01 2012 +0200

    Ugly bug fixed

<emphasis role="bold">Notes:
    r1 trunk</emphasis></code></literallayout>
        </para>
        </formalpara>

        <formalpara><title>Fetch all tags:</title>
        <para>
        <literallayout><code>[remote "origin"]
    ...
    <emphasis role="bold">tagopts = '--tags'</emphasis></code></literallayout>
        <code>--tags</code> option will force Git to fetch all tags, even those unreachable
        from the current branch. These may be convenient in case user would like to see 
        or check out tag set on the other branch.
        </para>
        </formalpara>

        </sect1>
    </chapter>

    <chapter id="modify">
        <title>Changing SubGit Configuration</title>
        
        <sect1><title>Writing Hooks</title>
        <para>In order to enable synchronization of Subversion and Git repositories, SubGit installs hooks into Git repository. These hooks are: 
        <itemizedlist>
            <listitem>Git <code>pre-receive</code> hook</listitem>
            <listitem>Git <code>post-receive</code> hook</listitem>
        </itemizedlist> 
        Presence of these hooks is crucial for SubGit to function properly, and users should never modify or remove these hook scripts.
        If necessary, above hooks functionality should be placed into <code>user-*</code> scripts that would be called by SubGit at 
        appropriate moments. SubGit <code>install</code> command takes care of already existing hooks and automatically places 
        their contents into the corresponding <code>user-*</code> script files (see <xref linkend="repository-after-install"/>).   
        </para>
        <para>
        Table below shows correspondence between standard hook scripts file names and file names that should be used to put hook 
        functionality into after SubGit is installed. Hooks parameters and return code processing rules are not affected by SubGit.
        Hooks that are not listed in the table are not used by SubGit and their standard file names are not changed.
        <literallayout><code><emphasis>standard hook name             hook name after SubGit is installed</emphasis>      

pre-receive                    user-pre-receive
post-receive                   user-post-receive
</code></literallayout>
On Windows OS <code>.cmd</code> or <code>.bat</code> extension should be added to Subversion hook file names. 
        </para>
        </sect1>
        
        <sect1><title>Applying configuration changes</title>
        <para>SubGit configuration could be changed after SubGit is installed into repository. Some of the changes become effective immediately and 
        others require <code>subgit install</code> or <code>subgit install --rebuild</code> command to be executed in order for the changes 
        to be applied.</para>
        
        <formalpara><title>Changes that become effective immediately:</title>
        <itemizedlist>
        <listitem>Modification of the authors mapping file (<code>subgit/authors.txt</code>)</listitem>
        <listitem>Modification of the password credentials file (<code>subgit/passwd</code>)</listitem>
        <listitem>Modification or creation of the <code>user-*</code> hook scripts</listitem>
        </itemizedlist>
        </formalpara>

        <formalpara><title>Changes that become effective after '<code>subgit install</code>' is run:</title>
        <itemizedlist>
        <listitem>Modification of the <code>core.authorsFile</code> option in the <code>subgit/config</code> file</listitem>
        <listitem>Modification of the <code>svn.fetchInterval</code> option option in the <code>subgit/config</code> file</listitem>
        <listitem>Modification of the <code>[auth]</code> section options in the <code>subgit/config</code> file</listitem>
        </itemizedlist>
        <code>subgit install</code> command will validate changes made to the <code>subgit/config</code> file and will apply these changes. Background
        translation process will be restarted if needed.
        </formalpara>

        <formalpara><title>Other configuration changes:</title><para></para>
        <para>In case more changes have to be made, in particular, changes to the branches mapping in <code>subgit/config</code> file, then
        the easiest way would be to reinstall SubGit following standard configuration stages (see <xref linkend="installation-stages"/>). It is not possible to update branches
        mapping for a Git repository where SubGit is already installed.</para> 
        
        <para>To stop background translation process, run <code>subgit uninstall</code> command on a Git repository.</para>
        </formalpara>
        </sect1>
    </chapter>

    <chapter id="uninstall">
        <title>Uninstalling SubGit</title>
        <para>Run <code>subgit uninstall</code> command to disable synchronization or to uninstall SubGit completely.</para>
        <para>Being run without options <code>uninstall</code> command removes SubGit hooks thus disabling translation:
<literallayout><code>$ <emphasis role="bold">subgit uninstall repository.git</emphasis>
SubGit version 2.0.0 ('Patrick') build #7777

About to shut down background translation process.
Shutdown request sent to background translation process (pid 4900).
Background translation process has received shutdown request and will exit NOW.

SHUTDOWN SUCCESSFUL

SubGit hooks have been removed from Git repository:
    /var/git/repository.git

<emphasis role="bold">Subversion and Git are no longer kept in sync.</emphasis></code></literallayout>
    Until Subversion and Git histories diverge, you may run SubGit <code>subgit install</code> to enable synchronization back. 
    </para>    
    <para>Run <code>subgit uninstall</code> command with the <code>--purge</code> option to remove SubGit completely. This command 
    will remove:
    <itemizedlist>
    <listitem>SubGit binaries and log files</listitem>
    <listitem>SubGit metadata</listitem>
    </itemizedlist>  
    </para>
    </chapter>
    
    <chapter id="registration">
        <title>Registering SubGit</title>
        <para>You may use SubGit for evaluation purposes without a registration as long as you like. 
        During that evaluation period SubGit will remind you on a necessity of registration with the help of post commit and post receive messages.
        <emphasis role="bold">Registration is required for production use.</emphasis></para>
        <formalpara><title>Obtain registration key:</title>
        <para><para/>SubGit registration key is a file with a contents like:</para>
        <literallayout><code>Purchase ID: CM-123456 
Name: Company &lt;company@email.com&gt;
Committers per repository: 10
Repositories: 10
Supported versions: 1.*.*

pjCssAR6cT4F3MnEDb0qKiEcb15UWlPBQwvrZCMlBmbihHrXVnZ2MyJKsUT
...
sSPIOdt1sz1@6d6PXEzybYJq1DOaZfXWzogM3jpB4M1hBA1LRJBbOE1qVWH</code></literallayout>
        Registration key could be obtained at SubGit <ulink url="http://subgit.com/register">registration page</ulink>. Key file will
        be send to you by email.
        </formalpara>
        
        <formalpara><title>Upload key:</title>
        <para><para/>Upload key you have received to the server where your Git repository is located. 
        You may upload the file, or copy and paste key file contents to the file on the server side.</para> 
        </formalpara>

        <formalpara><title>Register SubGit:</title>
        <para><para/>Run <code>subgit register</code> command to register repository. This command have to 
        be ran on behalf of the user who has write access to the <code>/etc</code> directory on Linux or OS X or to the system
        APP_DATA directory on Windows. This usually would be <code>root</code> user on Linux and OS X and user with Administrator 
        privileges on Windows.</para></formalpara>
        <para>   
        Unless key file location is specified on the command line with the <code>--key</code> option, SubGit
        looks for the key file at the following locations:
        <itemizedlist>
        <listitem><code>GIT_REPOSITORY/subgit/subgit.key</code></listitem>
        <listitem><code>USER_HOME/.subgit/subgit.key</code></listitem>
        </itemizedlist>
        SubGit <code>register</code> command provides some information on the key limits and on how 
        many repositories could be registered with it:
<literallayout><code>$ sudo <emphasis role="bold">subgit register --key subgit.key repository.git</emphasis>
SubGit version 2.0.0 ('Patrick') build #7777

Registration information:

    Registered for:       Company &lt;company@email.com&gt;
    Purchase ID:          CM-123456
    Committers Limit:     10

    This key has been used to register 1 repository; 
    You may use this key to register 9 more repositories (out of 10).

    REGISTRATION SUCCESSFUL</code></literallayout></para>
    <para>
      On UNIX like operating systems: In order for <code>subgit</code> to inherit the correct <code>java</code> environment
      you may need to run the <code>sudo</code>
      with the <code>-E</code> option. See <code>man sudo</code> for details.
    </para>
    </chapter>

    <chapter id="limitations">
        <title>Translation Limitations</title>
        <para>Subversion and Git version control systems solves the same problem, that is why Subversion and Git repositories
        synchronization is possible. However, Subversion and Git implementation differs and that is why there are number of
        entities in both VCS worlds that are not translated. Still these entities are fully functional for that VCS users, for 
        instance while empty directories are not translated from Subversion to Git, Subversion users may use them and create
        as many as they would like.</para>
        <para>The following entities are not translated from <emphasis role="bold">Subversion to Git</emphasis>:
        <itemizedlist>
        <listitem>Arbitrary user defined properties</listitem>
        <listitem>Revision properties</listitem>
        <listitem><code>svn:externals</code> properties</listitem>
        <listitem>Empty directories</listitem>
        <listitem>File locks</listitem>
        <listitem>Merge tracking information for cherry-pick merges</listitem>
        <listitem>Subversion path-based authentication is not taken into account for Git users</listitem>
        </itemizedlist>
        </para>
        
        <para>The following entities are not translated from <emphasis role="bold">Git to Subversion</emphasis>:
        <itemizedlist>
        <listitem>Git submodules</listitem>
        <listitem>Git notes</listitem>
        <listitem>Irrelevant file attributes</listitem>
        </itemizedlist>
        Future versions of SubGit will remove some of the above limitations.
        </para>
    </chapter>

    <chapter id="backup">
        <title>Backup</title>
        <para>SubGit as of version 2.0 does not provide integrated backup solution. Standard Git tools should be 
        used to back up repositories.</para>

        <formalpara><title>Backup Git Repository:</title><para><para/>
        First, disable Git pushes and then disable SubGit synchronization (single Git 
        repository is assumed):
        <literallayout><code># make user-pre-receive hook reject all pushes:        
$ cp /var/git/repos.git/hooks/user-pre-receive /var/git/repos.git/hooks/user-pre-receive.backup
$ echo '#!/bin/sh\nexit 1' > /var/svn/repos/.git/hooks/user-pre-receive

# disable synchronization
$ subgit uninstall /var/git/repos.git</code></literallayout>
        <code>uninstall</code> command will wait for ungoing translation to complete and will then shutdown background translation process.
        Marke sure that it is not running by running <code>jps</code> command and checking that there is no Java process named <code>SubGitDaemon</code>.
        Then, back up everything, reinstall SubGit and enable synchronization and Git pushes back:
<literallayout><code># back up all data
$ copy -R /var/git/repos.git repos.git.backup

# enable synchronization
$ subgit install /var/git/repos.git

# make user-pre-receive hook no longer reject pushes
$ rm /var/git/repos.git/hooks/user-pre-receive
$ cp /var/git/repos.git/hooks/user-pre-receive.backup /var/git/repos.git/hooks/user-pre-receive</code></literallayout>
        </para>
        </formalpara>
    </chapter>

    <chapter id="system-requirements">
        <title>System Requirements</title>
        <para>SubGit will run on the most modern systems. Requirements for the server are:
        <itemizedlist>
            <listitem>Windows XP or newer, Linux or OS X</listitem>
            <listitem>Oracle Java 1.5 or newer</listitem>
            <listitem>At least 256Mb*K of memory available, where K is the number of Subversion repositories.</listitem>
        </itemizedlist>
        SubGit 2.0 uses native pre-compiled executables for hook script, so that there is no overhead on starting JVM for each push (assuming background
        process is already running). Some of the more exotic systems might not be able to execute pre-compiled binaries, then SubGit falls back
        to the Java-based hooks. In this case memory requirement is increased by N*32Mb where N is maximum number of concurrent pushes.</para>
        <para>Memory available consists of physical memory and swap, so memory requirement gives an idea of how much memory might be allocated
        by SubGit at peak time, it does not mean that server must have that much physical memory installed.
        </para>
    </chapter>
    
    <chapter id="os-installation"><title>Installing SubGit Tool</title>
    <para>Before installing SubGit into Subversion repository, <code>subgit</code> tool itself has to be installed on your server.
    Make sure your server meets SubGit system requirements (see <xref linkend="system-requirements" xrefstyle="select: label"/>) and follow instructions below on how to install SubGit tool.</para>
    <formalpara><title>On Debian-based or Ubuntu OS:</title>
    <itemizedlist>
    <listitem>Download SubGit <emphasis role="bold">debian package</emphasis> file from SubGit <ulink url="http://subgit.com/download">download page</ulink>;</listitem>
    <listitem>Run <code>sudo dpkg -i subgit.deb</code> to install SubGit;</listitem>
    <listitem>Run <code>sudo apt-get install -f</code> to install missing dependencies, if there are any.</listitem>
    </itemizedlist>
    Now you may run <code>subgit</code> command from the command line. Test it by running <code>subgit --version</code> command. To upgrade SubGit tool, repeat above steps with the newer debian package file.
    </formalpara>

    <formalpara><title>On Linux and OS X:</title>
    <itemizedlist>
    <listitem>If necessary, download and install most recent version of the Java SE JDK from the Java <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">download page</ulink>;</listitem>
    <listitem>Download SubGit <emphasis role="bold">zip archive</emphasis> file from SubGit <ulink url="http://subgit.com/download">download page</ulink>;</listitem>
    <listitem>Acting as the <code>root</code> user, unpack all files from SubGit archive into <code>/opt/subgit/</code> directory;</listitem>
    <listitem>Append <code>/opt/subgit/bin</code> to the PATH variable, e.g. in the <code>/etc/profile</code> file.</listitem>
    </itemizedlist>
    Now you may run <code>subgit</code> command from the command line. Test it by running <code>subgit --version</code> command. 
    To upgrade SubGit tool, delete all files from the <code>/opt/subgit</code> directory and repeat above steps with the SubGit zip archive.
    </formalpara>

    <formalpara><title>On Windows OS:</title>
    <itemizedlist>
    <listitem>If necessary, download and install most recent version of the Java SE JDK from the Java <ulink url="http://www.oracle.com/technetwork/java/javase/downloads/index.html">download page</ulink>;</listitem>
    <listitem>Download SubGit <emphasis role="bold">zip archive</emphasis> file from SubGit <ulink url="http://subgit.com/download">download page</ulink>;</listitem>
    <listitem>Acting as Administrator user, unpack all files from SubGit archive into <code>C:\Program Files\SubGit</code> directory;</listitem>
    <listitem>Append <code>C:\Program Files\SubGit\bin</code> directory to the system PATH variable in the Control Panel.</listitem>
    </itemizedlist>
    Now you may run <code>subgit</code> command from the command line. Test it by running <code>subgit --version</code> command. 
    To upgrade SubGit tool, delete all files from the <code>C:\Program Files\SubGit</code> directory and repeat above steps with the SubGit zip archive.
    </formalpara>
   
    </chapter>

    <chapter id="contacts">
    <title>Useful Links and Contacts</title>
    
    <para>
    Please feel free to contact us at <ulink url="mailto:support@subgit.com">support@subgit.com</ulink>. We'd be glad 
    to address issues you may have with SubGit or to provide more information on how one may get most out of SubGit. We appreciate your feedback!</para>
    <para>
    The following links would be of use if you would like to report an issue or to talk to SubGit developers 
    on SubGit features:
    <itemizedlist>
    <listitem>SubGit issues tracker: <ulink url="http://issues.tmatesoft.com/issues/SGT">http://issues.tmatesoft.com/issues/SGT/</ulink></listitem>
    <listitem>SubGit mailing list: send email to <ulink url="mailto:subgit-users-subscribe@subgit.com">subgit-users-subscribe@subgit.com</ulink> to subscribe</listitem>
    </itemizedlist>
    Follow <emphasis role="bold"><ulink url="https://twitter.com/subgit">@subgit</ulink></emphasis> twitter account or <ulink url="https://plus.google.com/b/114128677298030695536/114128677298030695536/posts">SubGit page on Google+</ulink> 
    to stay up-to-date with SubGit development.
    </para>    
    </chapter>
</book>
